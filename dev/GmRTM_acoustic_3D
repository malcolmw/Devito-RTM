#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 20 10:46:10 2023

@author: malcolmw
"""


import devito
import devito_rtm
import h5py
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

compiler = devito.configuration["compiler"]
compiler.cc = compiler.CC = "/usr/bin/gcc-10"
compiler.cxx = compiler.CXX = "/usr/bin/g++-10"

STATIONS = [
    ('ZG', 'R0101'),
    ('ZG', 'R0901'),
    ('ZG', 'R0318'),
    ('ZG', 'R1618'),
    ('ZG', 'R2010'),
    ('ZG', 'R2001')
]

def main():
    config = parse_config()
    network = load_network()
    model = build_model(config)
    wfs = load_wfs(STATIONS, network)

    Ws, kernels = build_wavefield_kernels(model, wfs)
    image, op = build_imaging_operator(model, Ws, kernels)
    op(dt=model.critical_dt)
    
    return image, op, network.loc[STATIONS]
    
    
def parse_config():
    config = dict(
        domain=dict(
            shape=(101, 116, 40),    # Number of grid points (nx, ny, nz).
            spacing=(10., 10., 10.), # Grid spacing in m (dx, dy, dz).
            origin=(3710596.003824387, 537368.3199534912, -1584.6),     # Location of the top-left corner.
            nbl=20,                  # Number of absorbing boundary layers.
            bcs='damp',              # Absorbing boundary type.
            space_order=2            # Space order of the finite difference stencil.
        )
    )
    return config


def build_model(config):
    vp = np.ones(config['domain']['shape'])
    return devito_rtm.model.SeismicModel(
        vp=vp,
        **{
            key: config['domain'][key]
            for key in (
                'shape', 'spacing', 'origin', 'nbl', 'bcs', 'space_order'
            )
        }
        )

def build_imaging_operator(model, Ws, kernels):
    image = devito.Function(name='Im', grid=model.grid, dtype=np.float64)
    imaging_kernel = devito.Eq(image, (image + np.prod(Ws)))
    op = devito.Operator(
        [eq for kernel in kernels for eq in kernel] + [imaging_kernel], 
        subs=model.spacing_map
    )
    return image, op


def build_wavefield_kernels(model, wfs):
    '''
    Build the computational kernels to extrapolate the reverse time-migrated
    wavefield at each station location.

    Parameters
    ----------
    model : devito_rtm.models.SeismicModel
        DESCRIPTION.
    wfs : list
        List of Waveform objects.
    stations: pandas.DataFrame
        DataFrame with station coordinates.
    time_range : devito_rtm.models.TimeAxis
        DESCRIPTION.

    Returns
    -------
    None.

    '''

    Ws = list() # Reverse time-migrated wavefields for each station.
    kernels = list() # Computational kernel for each wavefield extrapolation.
    for wf in wfs:
        W = devito.TimeFunction(
            name=f'W_{wf.seed_id}',
            grid=model.grid,
            time_order=2,
            space_order=2,
            dtype=np.float64
        )
        Ws.append(W)
        pde = model.m * W.dt2 - W.laplace + model.damp * W.dt
        stencil = devito.Eq(W.forward, devito.solve(pde, W.forward))
        rsrc = devito_rtm.source.PointSource(
            name=f'X_{wf.seed_id}',
            grid=model.grid,
            time_range=wf.time_range,
            npoint=1,
            coordinates=wf.coords,
            space_order=2,
            time_order=2,
            dtype=np.float64
        )
        rsrc.data[:] = wf.data[-1::-1, np.newaxis]
        rsrc_term = rsrc.inject(
            field=W.forward, 
            expr=rsrc * wf.time_range.step**2/model.m
        )
        
        kernels.append([stencil, rsrc_term])

    return Ws, kernels


def load_network():
    network = pd.read_hdf('../data/test_wfs.hdf5', key='/stations')
    network = network.set_index(['network', 'station'])
    network = network.sort_index()
    return network


def load_wfs(stations, network):
    '''
    Return waveforms as a dictionary of {station: waveform} pairs.

    Parameters
    ----------
    path : TYPE
        DESCRIPTION.

    Returns
    -------
    wfs : TYPE
        DESCRIPTION.

    '''
    path = '../data/test_wfs.hdf5'
    meta = pd.read_hdf(path, key='/metadata')
    meta = meta.set_index(['network', 'station'])
    meta['index'] = np.arange(len(meta))
    meta = meta.sort_index()
    meta = meta.loc[stations]
    meta = meta.reset_index()
    
    wfs = list()
    
    with h5py.File(path, mode='r') as in_file:
        for _, row in meta.iterrows():
            network_code, station_code = row[['network', 'station']].values
            data = in_file['/wfs'][row['index']]
            time_range = devito_rtm.source.TimeAxis(
                start=row['start_time'].timestamp(),
                step=1/row['sampling_rate'],
                num=len(data)
            )
            coords = network.loc[
                (network_code, station_code), 
                ['easting', 'northing', 'z']
            ].values
            channel_code = 'DPZ' if network_code == 'ZG' else 'HHZ'
            seed_id = '_'.join((network_code, station_code, '', channel_code))
            wfs.append(Waveform(
                seed_id,
                data,
                time_range,
                coords
            ))

    return wfs


class Waveform:
    def __init__(self, seed_id, data, time_range, coords):
        self.seed_id = seed_id
        self.data = data + 0.05*np.random.randn(len(data))
        self.time_range = time_range
        self.coords = coords
        
        
def plot_field(field, network):
    ix, iy, iz = np.unravel_index(
        np.argmax(np.abs(field.data)), 
        field.data.shape
    )
    x0, y0, z0 = field.grid.origin
    nx, ny, nz = field.grid.shape
    dx, dy, dz = field.grid.spacing
    
    xx, yy, zz = np.meshgrid(
        x0 + np.arange(nx)*dx,
        y0 + np.arange(ny)*dy,
        z0 + np.arange(nz)*dz,
        indexing='ij'
    )
    
    fig = plt.figure()
    ax_xy = fig.add_subplot(2, 2, 1, anchor='E')
    ax_yz = fig.add_subplot(2, 2, 2, sharey=ax_xy, anchor='W')
    ax_xz = fig.add_subplot(2, 2, 3, sharex=ax_xy, anchor='NE')
    plt.subplots_adjust(wspace=0, hspace=0)

    ax_yz.set_xticklabels([])    
    ax_yz.set_yticklabels([])
    ax_xy.set_xticklabels([])
    ax_xz.set_yticklabels([])

    cmap = plt.get_cmap('seismic')
    amax = np.max(np.abs(field.data))
    color = 'k'
    linewidth = 1/2
    shading = 'nearest'
    ax_yz.pcolormesh(
        zz[ix], 
        yy[ix], 
        field.data[ix], 
        shading=shading,
        cmap=cmap,
        vmin=-amax,
        vmax=amax
    )
    ax_yz.axvline(zz[0, 0, iz], color=color, linewidth=linewidth)
    ax_yz.axhline(yy[0, iy, 0], color=color, linewidth=linewidth)
    
    ax_xz.pcolormesh(
        xx[:, iy], 
        zz[:, iy], 
        field.data[:, iy],
        shading=shading,
        cmap=cmap,
        vmin=-amax,
        vmax=amax
    )
    ax_xz.axvline(xx[ix, 0, 0], color=color, linewidth=linewidth)
    ax_xz.axhline(zz[0, 0, iz], color=color, linewidth=linewidth)
    
    ax_xy.pcolormesh(
        xx[:, :, iz], 
        yy[:, :, iz], 
        field.data[:, :, iz], 
        shading=shading,
        cmap=cmap,
        vmin=-amax,
        vmax=amax
    )
    ax_xy.axvline(xx[ix, 0, 0], color=color, linewidth=linewidth)
    ax_xy.axhline(yy[0, iy, 0], color=color, linewidth=linewidth)

    x0, y0, z0 = 3710896.0, 537743.3125, -1589.5999755859375
    color = 'C3'
    linewidth = 1
    ax_yz.axvline(z0, color=color, linewidth=linewidth)
    ax_yz.axhline(y0, color=color, linewidth=linewidth)
    ax_xy.axvline(x0, color=color, linewidth=linewidth)
    ax_xy.axhline(y0, color=color, linewidth=linewidth)
    ax_xz.axvline(x0, color=color, linewidth=linewidth)
    ax_xz.axhline(z0, color=color, linewidth=linewidth)
    
    ax_xy.scatter(
        network['easting'],
        network['northing'],
        marker='v',
        zorder=100
    )
    
    plt.show()

if __name__ == '__main__':
    image, op, network = main()
    plot_field(image, network)