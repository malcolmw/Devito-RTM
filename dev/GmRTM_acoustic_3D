#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 20 10:46:10 2023

@author: malcolmw
"""


import devito
import devito_rtm
import hdf5eis
import matplotlib.pyplot as plt
import numpy as np
import pathlib

compiler = devito.configuration["compiler"]
compiler.cc = compiler.CC = "/usr/bin/gcc-10"
compiler.cxx = compiler.CXX = "/usr/bin/g++-10"

PRECISION = np.float64

def main():
    config = parse_config()
    model = build_model(config)
    wfs = load_wfs(config['data']['waveform_path'])
    wfs = wfs[::256]

    Ws, kernels = build_wavefield_kernels(model, wfs, config)
    image, op = build_imaging_operator(model, Ws, kernels)
    print('Starting RTM...')
    op(dt=model.critical_dt)
    print('RTM complete.')
    
    return image, op, wfs
    
    
def parse_config():
    config = dict(
        domain=dict(
            shape=(73, 79, 98),    # Number of grid points (nx, ny, nz).
            spacing=(25., 25., 25.), # Grid spacing in m (dx, dy, dz).
            origin=(3710196.0, 536968.3, -443.15314),     # Location of the top-left corner.
            nbl=20,                  # Number of absorbing boundary layers.
            bcs='damp',              # Absorbing boundary type.
            space_order=8,           # Space order of the finite difference stencil.
            time_order=2
        ),
        data=dict(
            waveform_path=pathlib.Path(
                '/home/malcolmw/git/devito-RTM/data/test.hdf5'
            )
        )
    )
    return config


def build_model(config):
    vp = 4000*np.ones(config['domain']['shape'])
    return devito_rtm.model.SeismicModel(
        vp=vp,
        **{
            key: config['domain'][key]
            for key in (
                'shape', 'spacing', 'origin', 'nbl', 'bcs', 'space_order'
            )
        }
        )

def build_imaging_operator(model, Ws, kernels):
    image = devito.Function(name='Im', grid=model.grid, dtype=PRECISION)
    imaging_kernel = devito.Eq(image, (image + np.prod(Ws)))
    op = devito.Operator(
        [eq for kernel in kernels for eq in kernel] + [imaging_kernel], 
        subs=model.spacing_map,
        opt=('advanced', {'openmp': True})
    )
    return image, op


def build_wavefield_kernels(model, wfs, config):
    '''
    Build the computational kernels to extrapolate the reverse time-migrated
    wavefield at each station location.

    Parameters
    ----------
    model : devito_rtm.models.SeismicModel
        DESCRIPTION.
    wfs : list
        List of Waveform objects.
    stations: pandas.DataFrame
        DataFrame with station coordinates.
    time_range : devito_rtm.models.TimeAxis
        DESCRIPTION.

    Returns
    -------
    None.

    '''

    Ws = list() # Reverse-time migrated wavefields for each station.
    kernels = list() # Computational kernel for each wavefield extrapolation.
    for i_wf, wf in enumerate(wfs):
        W = devito.TimeFunction(
            name=f'W_{i_wf:04d}',
            grid=model.grid,
            time_order=config['domain']['time_order'],
            space_order=config['domain']['space_order'],
            dtype=PRECISION
        )
        Ws.append(W)
        pde = model.m * W.dt2 - W.laplace + model.damp * W.dt
        stencil = devito.Eq(W.forward, devito.solve(pde, W.forward))
        rsrc = devito_rtm.source.PointSource(
            name=f'X_{i_wf:04d}',
            grid=model.grid,
            time_range=wf.time_range,
            npoint=1,
            coordinates=wf.coords,
            space_order=config['domain']['space_order'],
            time_order=config['domain']['time_order'],
            dtype=PRECISION
        )
        rsrc.data[:] = wf.data[-1::-1, np.newaxis]
        rsrc_term = rsrc.inject(
            field=W.forward, 
            expr=rsrc * wf.time_range.step**2/model.m
        )
        
        kernels.append([stencil, rsrc_term])

    return Ws, kernels


def load_wfs(path):
    '''
    Return waveforms as a dictionary of {station: waveform} pairs.

    Parameters
    ----------
    path : TYPE
        DESCRIPTION.

    Returns
    -------
    wfs : TYPE
        DESCRIPTION.

    '''

    with hdf5eis.File(path, mode='r') as in_file:
        network, _ = in_file.metadata['network']
        network = network.drop_duplicates(subset=['network', 'station'])
        super_gather = in_file.timeseries['synthetic', ..., 0:0.75e9]
        gather = super_gather['synthetic'][0]
    network = network.reset_index(drop=True)
    wfs = list()
    
    for (i, row), data in zip(network.iterrows(), gather.data):
        time_range = devito_rtm.source.TimeAxis(
            start=gather.start_time.timestamp(),
            step=gather.sampling_interval,
            num=len(data)
        )
        network_code, station_code, channel_code = row[['network', 'station', 'channel']]
        coords = row[['easting', 'northing', 'z']].values
        channel_code = 'DPZ' if network_code == 'ZG' else 'HHZ'
        seed_id = '.'.join((network_code, station_code, '', channel_code))
        wfs.append(Waveform(
            seed_id,
            data,
            time_range,
            coords
        ))

    return wfs


class Waveform:
    def __init__(self, seed_id, data, time_range, coords):
        self.seed_id = seed_id
        self.data = data
        self.time_range = time_range
        self.coords = coords
        
        
def plot_field(field, src_coords=None, it=None, z_positive_down=False):
    import matplotlib as mpl
    x0, y0, z0 = field.grid.origin
    nx, ny, nz = field.grid.shape
    dx, dy, dz = field.grid.spacing
    xx, yy, zz = np.meshgrid(
        x0 + np.arange(nx)*dx,
        y0 + np.arange(ny)*dy,
        z0 + np.arange(nz)*dz,
        indexing='ij'
    )

    arg_max = np.argmax(np.abs(field.data))
    ix, iy, iz = np.unravel_index(arg_max, field.data.shape)
    img_max = np.array([x0+(ix-1)*dx, y0+(iy-1)*dy, z0+(iz-1)*dz])

    data = field.data if it is None else field.data[it]

    x_range = dx*(nx-1)
    y_range = dy*(ny-1)
    z_range = dz*(nz-1)
    w = [x_range/(x_range+z_range), z_range/(x_range+z_range)]
    h = [y_range/(y_range+z_range), z_range/(y_range+z_range)]
    gs = mpl.gridspec.GridSpec(2, 2, width_ratios=w, height_ratios=h)
    fig = plt.figure(figsize=(12,12))
    ax_xy = fig.add_subplot(gs[0, 0], aspect=1, anchor='SE')
    ax_yz = fig.add_subplot(gs[0, 1], aspect=1, sharey=ax_xy, anchor='SW')
    ax_xz = fig.add_subplot(gs[1, 0], aspect=1, sharex=ax_xy, anchor='NE')
    plt.subplots_adjust(hspace=0, wspace=0)


    amax = np.max(np.abs(data))
    kwargs = dict(
        vmin=-amax,
        vmax=amax,
        cmap=plt.get_cmap('seismic'),
        shading='gouraud'
    )
    ax_xy.pcolormesh(
        xx[:, :, iz],
        yy[:, :, iz],
        data[:, :, iz],
        **kwargs
    )
    ax_xz.pcolormesh(
        xx[:, iy],
        zz[:, iy],
        data[:, iy],
        **kwargs
    )
    ax_yz.pcolormesh(
        zz[ix],
        yy[ix],
        data[ix],
        **kwargs
    )
    for ax, vline, hline in zip(
        (ax_xy, ax_xz, ax_yz),
        img_max[[0, 0, 2]],
        img_max[[1, 2, 1]]
    ):
        ax.axvline(vline, color='k', linewidth=1/2)
        ax.axhline(hline, color='k', linewidth=1/2)
    if src_coords is not None:
        for ax, x0, x1 in zip(
            (ax_xy, ax_xz, ax_yz),
            src_coords[[0, 0, 2]],
            src_coords[[1, 2, 1]]
        ):
            ax.scatter(x0, x1)
        
    ax_xy.xaxis.tick_top()
    ax_yz.xaxis.tick_top()
    ax_yz.yaxis.tick_right()
    if z_positive_down is True:
        ax_xz.invert_yaxis()
    else:
        ax_yz.invert_xaxis()

    return dict(
        ax_xy=ax_xy,
        ax_xz=ax_xz,
        ax_yz=ax_yz
    )

def plot(wf):
    fig, ax = plt.subplots()
    ax.plot(wf.data)
    

if __name__ == '__main__':
    image, op, wfs = main()
    axes = plot_field(
        image, 
        src_coords=np.array([3711108.5, 537955.82, 781.846871])
    )
    x = [wf.coords[0] for wf in wfs]
    y = [wf.coords[1] for wf in wfs]
    axes['ax_xy'].scatter(x, y)